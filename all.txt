body {
  padding: 10px;
  font: 20px "Lucida Grande", Helvetica, Arial, sans-serif;
}

h1 {
  margin: 0px;
  padding: 20px 0px;
  text-align: center;
  color: #B22222;
  font-size: 200%;
}

p {
  text-align: center;
}

a {
  border-radius: 5px;
  padding: 5px 10px;
  text-decoration: none;
  display: inline-block;
  color: #00B7FF;
  text-align: center;
}


p i {
  font-size: 50px;
  width: 31%;
  text-align: center;
}

a:hover {
  background: #00B7FF;
  color: #fff;
}

.left {
  width: 30%;
  height: 100%;
}

.right {
  width: 30%;
  height: 100%;
}

.middle {
  width: 30%;
  height: 100%;
  padding: 5px 10px;
  color: #00B7FF;
  text-decoration: none;
}
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('npm-popular:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log(`Server: http://localhost:${port}`)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
'use strict';

module.exports = {
  port: 3000,
  session: {
    secret: 'npm-popular',
    key: 'npm-popular',
    maxAge: 2592000000
  },
  mongodb: 'mongodb://zyszys:zys123@ds119323.mlab.com:19323/npm-popular' // mongodb://localhost:27017/npm-popular'
};
'use strict';

const mongoose = require('mongoose');
const config = require('../config');

mongoose.connect(
  config.mongodb,
  { useNewUrlParser: true }
);

exports.Package = mongoose.model('Package', {
  name: String,
  url: String,
  homepage: String,
  github: String
});
'use strict';

const Package = require('../lib/mongo').Package;

module.exports = {
  // 获取所有 packages
  getPackages: () => Package.find({})
};
'use strict';

const express = require('express');
const router = express.Router();

const packageModel = require('../models/package');

/* GET home page. */
router.get('/', function(req, res, next) {
  packageModel.getPackages().then(pkgs => {
    res.render('index', { title: 'npm-popular', pkgs });
  });
});

module.exports = router;
'use strict';

const express = require('express');
const router = express.Router();

const packageModel = require('../models/package');

/* GET home page. */
router.get('/', function(req, res, next) {
  packageModel.getPackages().then(pkgs => {
    res.render('index', { title: 'packages', pkgs });
  });
});

module.exports = router;
'use strict';

const express = require('express');
const router = express.Router();

/* GET users listing. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'User' });
});

module.exports = router;
# The most popular node modules in npmjs.com.

browserify => npmjs.com/package/browserify => https://github.com/browserify/browserify#readme => https://github.com/browserify/browserify
grunt-cli => npmjs.com/package/grunt-cli => https://github.com/gruntjs/grunt-cli#readme => https://github.com/gruntjs/grunt-cli
bower => npmjs.com/package/bower => http://bower.io => https://github.com/bower/bower
gulp => npmjs.com/package/gulp => http://gulpjs.com => https://github.com/gulpjs/gulp
grunt => npmjs.com/package/grunt => https://gruntjs.com/ => https://github.com/gruntjs/grunt
express => npmjs.com/package/express => http://expressjs.com/ => https://github.com/expressjs/express
npm => npmjs.com/package/npm => https://docs.npmjs.com/ => https://github.com/npm/cli
cordova => npmjs.com/package/cordova => https://github.com/apache/cordova-cli#readme => https://github.com/apache/cordova-cli
forever => npmjs.com/package/forever => https://github.com/foreverjs/forever#readme => https://github.com/foreverjs/forever
lodash => npmjs.com/package/lodash => https://lodash.com/ => https://github.com/lodash/lodash
request => npmjs.com/package/request => https://github.com/request/request#readme => https://github.com/request/request
chalk => npmjs.com/package/chalk => https://github.com/chalk/chalk#readme => https://github.com/chalk/chalk
async => npmjs.com/package/async => https://caolan.github.io/async/ => https://github.com/caolan/async
express => npmjs.com/package/express => http://expressjs.com/ => https://github.com/expressjs/express
react => npmjs.com/package/react => https://reactjs.org/ => https://github.com/facebook/react
bluebird => npmjs.com/package/bluebird => https://github.com/petkaantonov/bluebird => https://github.com/petkaantonov/bluebird
commander => npmjs.com/package/commander => https://github.com/tj/commander.js#readme => https://github.com/tj/commander.js
debug => npmjs.com/package/debug => https://github.com/visionmedia/debug#readme => https://github.com/visionmedia/debug

# Generated by npm-popular-modules-cli.
'use strict';

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const { Package } = require('../lib/mongo');

const readAsync = promisify(fs.readFile);

process.on('exit', () => {
  console.log('Great ! All data above are saved.');
});

const writeToDB = async (path) => {
  const content = await readAsync(path);
  const list = await strToList(content);
  const res = await savePkgs(list);
  return res;
};

const strToList = async buf => {
  return buf
    .toString()
    .split('\n')
    .slice(2, -3);
};

const savePkg = async (name, url, homepage, github) => {
  let pkg = new Package({ name, url, homepage, github });
  pkg = await pkg.save();
  return pkg.name;
};

const savePkgs = async list => {
  const pkgs = [];
  let name, url, homepage, github;
  for (const str of list) {
    [name, url, homepage, github] = [...separate(str, ' => ')];
    const pkg = await savePkg(name, url, homepage, github);
    pkgs.push(pkg);
  }
  return pkgs;
};

const separate = (str, symbol) => {
  return str.split(symbol);
};

(async () => {
  const res = await writeToDB(path.resolve(__dirname, './Popular'));
  console.log(res);
  process.exit();
})();
extends layout

block content
  h1= message
  h2= error.status
  pre #{error.stack}
extends layout

block content
  h1= title
  p
      i(class="fab fa-npm")
      i(class="fas fa-home")
      i(class="fab fa-github-square")
  each pkg in pkgs
    p
      a(class='left', href='https://'+pkg.url) #{pkg.name}
      a(class='middle', href=pkg.homepage) #{pkg.name}
      a(class='right', href=pkg.github) #{pkg.name}
doctype html
html
  head
    title= title
    link(rel="stylesheet", href="https://use.fontawesome.com/releases/v5.3.1/css/all.css", integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU", crossorigin="anonymous")
    link(rel='stylesheet', href='/stylesheets/style.css')
  body
    block content
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
const packageRouter = require('./routes/package');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/package', packageRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
{
  "name": "npm-popular",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www",
    "data": "cd scripts && npm-popular && node writeToDB.js",
    "lint": "prettier --single-quote --write *.js */*.js"
  },
  "dependencies": {
    "cookie-parser": "~1.4.3",
    "debug": "~2.6.9",
    "express": "~4.16.0",
    "http-errors": "~1.6.2",
    "jade": "~1.11.0",
    "mongoose": "5.2.17",
    "morgan": "~1.9.0"
  },
  "devDependencies": {
    "npm-popular-modules-cli": "0.0.2",
    "prettier": "1.14.3"
  }
}
{
  "extends": [
    "config:base"
  ]
}
{}

# npm-popular

[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat)](https://github.com/prettier/prettier)
[![license](https://img.shields.io/github/license/npm-popular/npm-popular.svg)](https://github.com/npm-popular/npm-popular/blob/master/LICENSE)

> Show the most popular node modules on npmjs.com

## Requirements

- NodeJs
- Mongodb

## Install

```sh
$ git clone git@github.com:ZYSzys/npm-popular.git

$ cd npm-popular

$ npm install

# be sure mongodb is running
$ npm run start
```
